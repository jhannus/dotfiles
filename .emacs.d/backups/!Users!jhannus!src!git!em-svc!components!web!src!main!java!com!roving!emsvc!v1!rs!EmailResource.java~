/*
 * @(#)EmailResource
 *
 * Copyright 2011 by Constant Contact Inc.,
 * Waltham, MA 02451, USA
 * Phone: (781) 472-8100
 * Fax: (781) 472-8101
 *
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Constant Contact, Inc. created for Constant Contact, Inc.
 * You shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with Constant Contact, Inc.
 * 
 * History
 *
 * Date         Author      Comments
 * ====         ======      ========
 */
package com.roving.emsvc.v1.rs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.MessageCodesResolver;

import com.roving.accountsvc.v2.dto.Customer;
import com.roving.api.campaign.domain.Campaign;
import com.roving.api.campaign.domain.CampaignActivity;
import com.roving.api.campaign.domain.CampaignActivityStatus;
import com.roving.api.campaign.domain.ProductId;
import com.roving.api.campaign.domain.StatusCode;
import com.roving.api.campaign.rs.CampaignResource;
import com.roving.api.campaign.rs.v2.CampaignActivityResource;
import com.roving.common.config.Config;
import com.roving.emsvc.content.HtmlTextExtractor;
import com.roving.emsvc.content.Tracking;
import com.roving.emsvc.dao.AgentDao;
import com.roving.emsvc.dao.AgentData;
import com.roving.emsvc.v1.dto.ActivityContent;
import com.roving.emsvc.v1.dto.EmailCampaignTestSend;
import com.roving.emsvc.v1.exception.ValidationException;
import com.roving.log.IRovingLogger;
import com.roving.log.RovingLogFactory;
import com.roving.service.client.AccountServiceClient;
import com.roving.service.client.CampaignServiceClient;
import com.roving.service.client.EmServiceClient;
import com.roving.service.client.GalileoServiceClient;
import com.roving.service.client.IEmailCampaignNameUnique;
import com.roving.service.client.SyndicationServiceClient;
import com.roving.service.client.exception.ServiceException;
import com.roving.service.model.AuthPlatformDocument;
import com.roving.service.model.GalileoDocumentMetadata;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateExceptionHandler;

/**
 * @author nblumberg
 *
 * Nov 20, 2012
 */
public class EmailResource implements EMSService, IEmailCampaignNameUnique {
    // =================
    // CONSTANTS
    // =================
    private static final IRovingLogger logger = RovingLogFactory.getLogger(EmailResource.class);
    public static final int EMAIL_MARKETING = 1;
    public static final int SURVEY = 2;
    public static final int IMAGE_HOSTING = 3;
    public static final int ARCHIVE = 4;
    public static final int EVENT_MARKETING = 5;
    public static final int SOCIAL_CAMPAIGNS = 6;
    public static final int LOCAL_DEALS = 7;
    
    public static final int CAMPAIGN_TEST_EMAIL = 1001;
    public static final int CAMPAIGN_BULK_EMAIL = 10;
    public static final int CAMPAIGN_AUTHORING_SYSTEM = 3;

    // =================
    // MEMBERS
    // =================
    private AgentDao agentDao;
    private Configuration freemarkerConfiguration;
    private String footerHtml = null;
    private Tracking tracking; 

    @Autowired 
    private CampaignServiceClient campaignServiceClient;
    @Autowired
    private SyndicationServiceClient syndicationServiceClient;
    @Autowired
    private GalileoServiceClient authPlatformClient;
    @Autowired 
    private AccountServiceClient accountServiceClient;
    @Autowired
    private CampaignResource campaignService;
    @Autowired
    private CampaignActivityResource campaignActivityService;
    
    
    // =================
    // CONSTRUCTOR(S)
    // =================
    /**
     * @param AgentDAO
     * @param tracking
     */
    public EmailResource(AgentDao agentDao, Tracking tracking) {
        super();

        this.agentDao = agentDao;
        this.tracking = tracking;
        
        try {
            InputStream is = this.getClass().getClassLoader().getResourceAsStream("footer.html");
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
            } 
            footerHtml = sb.toString();
            br.close();
        }
        catch (IOException e) {
            logger.error("Failed to read footerHtml from footer.html file due to unexcepted exception: " + e.toString());
        }
        
        freemarkerConfiguration = new Configuration();
        // This will keep freemarker from throwing exceptions when variables are missing. When exceptions are thrown
        // for missing content we end up with failed contacts without this line.
        freemarkerConfiguration.setTemplateExceptionHandler(TemplateExceptionHandler.IGNORE_HANDLER);
    }

    
    // =================
    // PUBLIC METHODS
    // =================
    @Override
    public List<Long> findExternalIds(long accountId, String name) throws Exception {
        List<AgentData> agents = new ArrayList<AgentData>();
        List<Long> externalIds = new ArrayList<Long>();
        
        if (StringUtils.isEmpty(name)) {
            // name is empty, just fetch all...
            agents = agentDao.findAgents(accountId);
        } 
        else {
            AgentData agent = agentDao.findAgentByName(accountId, name);
            if (agent != null) {
                agents.add(agent);
            }
        }
        
        if (agents != null && agents.size() != 0) {
            for (AgentData a : agents) {
                if (a != null) {
                    externalIds.add(a.getAgentUid());
                }
            }
        }
        
        return externalIds;
    }
    
    
    @Override
    public Campaign getCampaign(long accountId, 
                                String campaignId) throws ValidationException, Exception {
        Campaign campaign = campaignServiceClient.getCampaign(accountId, campaignId);
        return campaign;
    }

//    
//    @Override
//    
//    public AgentDto getAgent(long accountId, 
//                             String agentUid) throws ValidationException, Exception {
//        logger.warn("getAgent() not yet implemented");
//        return null;
//    }
    
    @Override
    public String createEmail(long accountId,
                              String name,
                              String documentCollectionId,
                              String timeZoneId,
                              String description) throws ValidationException, Exception {
        String logPrefix = "EmailResource.createEmail(): ";
        // Validate parameters
        if (accountId < 0) {
            throw new ValidationException(logPrefix + "Missing required parameter accountId.");
        }
        else if (name == null) {
            throw new ValidationException(logPrefix + "Missing required parameter name.");
        }
        else if (documentCollectionId == null) {
            throw new ValidationException(logPrefix + "Missing required parameter documentCollectionId.");
        }
        else if (timeZoneId == null) {
            throw new ValidationException(logPrefix + "Missing required parameter timeZoneId.");
        }

        logger.debug(logPrefix + "\naccountId: " + accountId + ", \nname: " + name + ", \ndocumentCollectionId: " + documentCollectionId + ", \ntimeZoneId: " + timeZoneId + ", \ndescription: " + description);

        // decode first
        name = URLDecoder.decode(name, "UTF-8");
        if (description != null && description.length() > 0 ) {
            description = URLDecoder.decode(description, "UTF-8");
        }

        // 1. Create Campaign
        String campaignId = null;
        try {
            campaignId = campaignServiceClient.createEmailMarketingCampaign(accountId, name, description);
        }
        catch (Exception e) {
            String msg = logPrefix + "Unable to create new campaign for accountId " + accountId + " because: " + e.toString();
            logger.error(msg);
            throw new Exception(msg);
        }
        logger.debug(logPrefix + "campaignId: " + campaignId);

        // 2. Create Agent for CampaignActivitys
        long agentUid = Config.getNumericUID();
        int result = agentDao.insertAgent(accountId, agentUid, name);
        if (result != 1) {
            String msg = logPrefix + "Returned from insertAgent DAO call with invalid result: " + result;
            logger.error(msg);
            throw new Exception(msg);
        }
        logger.debug(logPrefix + "agentUid: " + agentUid);

        // 3. Create CampaignActivity for Permalink
        String permalinkCampaignActivityId;
        try {
            permalinkCampaignActivityId = campaignServiceClient.createPermalinkCampaignActivity(accountId, campaignId, agentUid, name, description, timeZoneId, documentCollectionId);
        }
        catch (Exception e) {
            String msg = logPrefix + "Unable to create new Permalink CampaignActivity for accountId " + accountId + " because: " + e.toString();
            logger.error(msg);
            deactivateAgent(accountId, agentUid);
            throw new Exception(msg);
        }
        if (permalinkCampaignActivityId == null || permalinkCampaignActivityId.length() == 0) {
            String msg = logPrefix + "Received invalid id for new Permalink CampaignActivity for accountId " + accountId;
            logger.error(msg);
            deactivateAgent(accountId, agentUid);
            throw new Exception(msg);
        }
        logger.debug(logPrefix + "Permalink campaignActivityId: " + permalinkCampaignActivityId);

        // 4. Create CampaignActivity for email
        String emailCampaignActivityId = null;
        try {
            emailCampaignActivityId = campaignServiceClient.createEmailCampaignActivity(accountId, campaignId, agentUid, permalinkCampaignActivityId, name, description, timeZoneId, documentCollectionId);
        }
        catch (Exception e) {
            String msg = logPrefix + "Received invalid id for new Email CampaignActivity for accountId " + accountId;
            logger.error(msg);
            deactivateAgent(accountId, agentUid);
            throw new Exception(msg);
        }
        if (emailCampaignActivityId == null || emailCampaignActivityId.length() == 0) {
            String msg = logPrefix + "Received invalid id for new Email CampaignActivity for accountId " + accountId;
            logger.error(msg);
            deactivateAgent(accountId, agentUid);
            throw new Exception(msg);
        }
          
        // Temporarily disable until I can figure out why this is failing
//        mapAgent2CampaignActivity(agentUid, activityStatus.getCampaignActivityId(), name); // ca.getCampaignActivityId()
        
        logger.debug(logPrefix + "email campaignActivityId: " + emailCampaignActivityId);

        return emailCampaignActivityId;
    }

    
    @Override
    public int updateAgent(long accountId, 
                           long agentUid, 
                           String name) throws ValidationException, Exception {
        String logPrefix = "EmailResource.updateAgent(): ";
        // Validate parameters
        if (accountId < 0) {
            throw new ValidationException(logPrefix + "Missing required parameter accountId.");
        }
        else if (agentUid < 0) {
            throw new ValidationException(logPrefix + "Missing required parameter agentUid.");
        }
        logger.debug(logPrefix + "\naccountId: " + accountId + ", \nagentUid: " + agentUid + ", \nname: " + name);

        int rowsUpdated = 0;
        if (name != null) {
            logPrefix += "updateExternalName DAO call ";
            rowsUpdated = agentDao.updateExternalName(accountId, agentUid, name);
        }
        else {
            logPrefix += "updateLastUpdate DAO call ";
            rowsUpdated = agentDao.updateLastUpdate(accountId, agentUid);
        }
        
        if (rowsUpdated != 1) {
            String msg = logPrefix + "returned with " + rowsUpdated + " rowsUpdated"; 
            logger.error(msg);
            throw new Exception(msg);
        }

        return rowsUpdated;
    }

    
    @Override
    public int deactivateAgent(long accountId, 
                               long agentUid) throws ValidationException, Exception {
        String logPrefix = "EmailResource.deactivateAgent(): ";
        // Validate parameters
        // Validate parameters
        if (accountId < 0) {
            throw new ValidationException(logPrefix + "Missing required parameter accountId.");
        }
        else if (agentUid < 0) {
            throw new ValidationException(logPrefix + "Missing required parameter agentUid.");
        }
        logger.debug(logPrefix + "\naccountId: " + accountId + ", \nagentUid: " + agentUid);

        int rowsUpdated = agentDao.deactivateAgent(accountId, agentUid);

        if (rowsUpdated != 1) {
            String msg = logPrefix + "returned from deactivateAgent DAO call with "+ rowsUpdated + " rowsUpdated"; 
            logger.error(msg);
            throw new Exception(msg);
        }
        return rowsUpdated;
    }

    
    @Override
    public String getEmailHeaderContent(long accountId) throws ValidationException, Exception {
        return null;
    }
    
    
    @Override
    public String getEmailFooterContent(long accountId, 
                                        String address, 
                                        String city, 
                                        String state, 
                                        String zipCode, 
                                        String fromEmail, 
                                        String recipient,
                                        boolean isPreview) throws ValidationException, Exception {
      
        Customer customer = null;
        try {
            customer = accountServiceClient.getCustomer(accountId);
        }
        catch (Exception e) {
            logger.error("getEmailFooterContent(): accountsvc call to retrieve Customer " + accountId + " failed: " + e.toString());
        }
  
        String fwtfLink = isPreview ? "#" : "http://ui.d1.constantcontact.com/sa/fwtf.jsp?llr=ln7oazaab&amp;m=1100350976427&amp;ea=nblumberg%40constantcontact.com&amp;a=1100372425954";
        String unsubscribeLink = isPreview ? "#" : "http://visitor.d1.constantcontact.com/do?p=un&amp;mse=001klyYJchH7NciLLaaMaqT5A7ocFfDGCQT&amp;t=001eT0VmVnvrbci-aZ1-jdI3g%%&amp;llr=ln7oazaab";
        String ctctLink = isPreview ? "#" : "http://www.constantcontact.com/index.jsp?cc=PM_B2CP"; // "http://www.constantcontact.com/index.jsp?cc=PM_B2CP"
        String updateLink = isPreview ? "#" : "http://visitor.d1.constantcontact.com/do?p=oo&amp;mse=001klyYJchH7NciLLaaMaqT5A7ocFfDGCQT&amp;t=001eT0VmVnvrbci-aZ1-jdI3g%%&amp;llr=ln7oazaab";
        String company = customer != null ? customer.getOrganizationName() : "Mock company";
        address = address == null || address.length() == 0 ? "Mock address" : address;
        city = city == null || city.length() == 0 ? "Mock city" : city;
        state = state == null || state.length() == 0 ? customer.getStateCode() : state;
        zipCode = zipCode == null || zipCode.length() == 0 ? "Mock zip code" : zipCode;
        fromEmail = fromEmail == null || fromEmail.length() == 0 ? "mock.sender@constantcontact.com" : fromEmail;
        recipient = recipient != null && recipient.length() > 0 ? recipient : "${Contact.emailAddress}";
        if (footerHtml == null) {
            logger.error("footerHtml is null");
            return null;
        }
        
        // Build the data-model
        Map<String, Object> data = new HashMap<String, Object>();
        data.put("message", "Hello World!");
        data.put("fwtfLink", fwtfLink);
        data.put("unsubscribeLink", unsubscribeLink);
        data.put("ctctLink", ctctLink);
        data.put("updateLink", updateLink);
        data.put("company", company);
        data.put("address", address);
        data.put("city", city);
        data.put("state", state);
        data.put("zipCode", zipCode);
        data.put("sender", fromEmail);
        data.put("recipient", recipient);
        
        return resolveFreemarkerTags(footerHtml, data);
    }
    
    
    @Override
    public String getPreviewHtml(long accountId,
                                 String documentId, 
                                 String campaignActivityId,
                                 long externalId) throws ValidationException, Exception {
        ActivityContent activityContent = doGetActivityContent(accountId, documentId, campaignActivityId, externalId);
        return activityContent.getHtmlDoc();
    }
    
    
    @Override
    public String getPreviewText(long accountId,
                                 String documentId, 
                                 String campaignActivityId,
                                 long externalId) throws ValidationException, Exception {
        ActivityContent activityContent = doGetActivityContent(accountId, documentId, campaignActivityId, externalId);
        return activityContent.getTextDoc();
    }
    
    
    @Override
    public ActivityContent getActivityContent(long accountId,
                                              String documentId, 
                                              String campaignActivityId,
                                              long externalId) throws ValidationException, Exception {
        return doGetActivityContent(accountId, documentId, campaignActivityId, externalId);
    }
    

    // TODO: XP-5468 - if auth-platform returns 404, return 404 to Syndication, not 500
    @Override
    public ActivityContent getActivityContent(long accountId,
                                              String documentId, 
                                              String campaignActivityId,
                                              long externalId,
                                              Map<String,String> properties) throws ValidationException, Exception {
        return doGetActivityContent(accountId, documentId, campaignActivityId, externalId);
    }
    
    
    /**
     * Deprecated
     */
    @Override
    public ActivityContent getActivityContent(String documentId, 
                                              String campaignActivityId,
                                              long externalId,
                                              Map<String,String> properties) throws ValidationException, Exception {
        String msg = "EmailResource: email/content - campaignActivityId: " + campaignActivityId + ", documentCollectionId: " + documentId + ", externalId:" + externalId;
        long accountId = getAccountId(msg, properties);
        logger.debug(msg);

        return doGetActivityContent(accountId, documentId, campaignActivityId, externalId);
    }
    
    
    @Override
    public ActivityContent getArchiveActivityContent(long accountId,
                                                     String documentId,
                                                     String campaignActivityId, 
                                                     long externalId) throws ValidationException, Exception {
        return doGetActivityContent(accountId, documentId, campaignActivityId, externalId);
    }
    
    
    @Override
    public ActivityContent getArchiveActivityContent(long accountId,
                                                     String documentId,
                                                     String campaignActivityId, 
                                                     long externalId,
                                                     Map<String, String> properties) throws ValidationException, Exception {
        // Validate parameters
        if (accountId <= 0 || campaignActivityId == null || documentId == null || externalId <= 0) {
            throw new ValidationException("Error: Missing required parameter.");
        }

        return doGetActivityContent(accountId, documentId, campaignActivityId, externalId);
    }
    
    
    /**
     * Deprecated
     */
    @Override
    public ActivityContent getArchiveActivityContent(String documentId,
                                                     String campaignActivityId, 
                                                     long externalId,
                                                     Map<String, String> properties) throws ValidationException, Exception {
        String msg = "EmailResource: archive/content - campaignActivityId: " + campaignActivityId + ", documentCollectionId: " + documentId + ", externalId:" + externalId;
        long accountId = getAccountId(msg, properties);
        logger.debug(msg);

        return doGetActivityContent(accountId, documentId, campaignActivityId, externalId);
    }
    
    
    /**
     * This is being used by em to determine name uniqueness in order to enforce ROVING
     * column restrictions on Agents until we are no longer Agent-dependent. Not intended 
     * for general use outside of em.
     * 
     * @deprecated
     * @param accountId long The account to search against
     * @param name String The name to search against
     * @return boolean Whether the given name is unique among the Agents in the account
     * @throws Exception
     */
    @Deprecated
    public boolean isEmailCampaignNameUnique(long accountId, String name) throws Exception {
        return isEmailCampaignNameUnique(accountId, 0L, name);
    }
    
    
    /**
     * This is being used by em to determine name uniqueness in order to enforce ROVING
     * column restrictions on Agents until we are no longer Agent-dependent. Not intended 
     * for general use outside of em.
     * 
     * @deprecated
     * @param accountId long The account to search against
     * @param externalId long An externalId to ignore in the list of name matches when determining uniqueness (i.e. ignore self-matches)
     * @param name String The name to search against
     * @return boolean Whether the given name is unique among the Agents in the account
     * @throws Exception
     */
    @Deprecated
    public boolean isEmailCampaignNameUnique(long accountId, long externalId, String name) throws Exception {
        EmServiceClient serviceClient = new EmServiceClient();
        serviceClient.setEmsService(this);
        return serviceClient.isEmailCampaignNameUnique(accountId, externalId, name);
    }
    
    
    @Override
    public void sendTestEmail(long accountId, String campaignId, EmailCampaignTestSend testSend) 
            throws ValidationException, Exception {
        
        // TODO validate account status
        // TODO validate email test send quota
        // TODO fetch message settings
        // TODO validate email addresses
        
        // fetch campaign data...
        AuthPlatformDocument doc = null;
        Campaign c = null;
        
        try {
            // fetch required data...
            doc = authPlatformClient.getDocument(accountId, testSend.getDocumentId());
            c = campaignService.getCampaign(accountId, campaignId);
        } catch (WebApplicationException e) {
            logger.error("Error fetching required data for test email. Reason: "+e.getMessage());
            throw new WebApplicationException(buildResponse(Response.Status.fromStatusCode(e.getResponse().getStatus()), 
                    "Error fetching reuired data: "+e.getMessage()));
        }
        
        // TODO assemble email content (note+document+warning)
        CampaignActivityStatus activityStatus = null;
        String htmlContent = testSend.getTopNote() + doc.getContent() + testSend.getBottomNote();
        
        try {            
            // create new activity in campaign with messageCode TEST_EMAIL...
            CampaignActivity testSendActivity = new CampaignActivity();
            testSendActivity.setCampaignId(c.getCampaignId());
            testSendActivity.setDocumentCollectionId(testSend.getDocumentId());
            testSendActivity.setStartOn(new Date());
            testSendActivity.setEndAt(testSendActivity.getStartOn());
            testSendActivity.setCurrentStatus(StatusCode.SCHEDULED.getCode());
            testSendActivity.setType(CAMPAIGN_BULK_EMAIL);
            testSendActivity.setMessageCode(CAMPAIGN_TEST_EMAIL);
            testSendActivity.setProductId(ProductId.EMAIL_MARKETING.getProductId());
            testSendActivity.setAuthoringSystem(CAMPAIGN_AUTHORING_SYSTEM);
            
            activityStatus = campaignActivityService.createCampaignActivity(accountId, testSendActivity);
        } catch (WebApplicationException e) {
            // TODO 500 for now...
            logger.error("Error creating test email campaign ativity. Reason: "+e.getMessage());
            throw new WebApplicationException(buildResponse(Status.INTERNAL_SERVER_ERROR, 
                    "Error creating activity: "+e.getMessage()));
        }
        
        try {
            // send email... 
            syndicationServiceClient.sendEmailToAddress(activityStatus.getCampaignActivityId(), 
                    "jhannus@constantcontact.com", "jhannus", "noreply@constantcontact.com", 
                    testSend.getRecipients(), "subject line", htmlContent, "plainContent goes here");
        } catch (ServiceException e) {
            // TODO 500 for now...
            logger.error("Error sending test email. Reason: "+e.getMessage());
            throw new WebApplicationException(buildResponse(Status.INTERNAL_SERVER_ERROR, "Error sending email: "));
        }
        
    }


    // ==================
    // NON-PUBLIC METHODS
    // ==================
    private long getAccountId(String errorPrefix, Map<String,String> properties) throws Exception {
        String errorMsg = errorPrefix + "\nFailed to retrieve valid accountId";
        if (properties == null) {
            logger.error(errorMsg + " passed null properties");
            throw new Exception(errorMsg + " passed null properties");
        }
        else if (!properties.containsKey("accountId")) {
            logger.warn(errorMsg + " passed properties that does not contain 'accountId'. Assuming this CampaignActivity was created pre-SSO integration and that accountId should == 1.");
//            throw new Exception(errorMsg + " passed properties that does not contain 'accountId'");
            return 1L;
        }
        long accountId = 0;
        try {
            accountId = Long.parseLong(properties.get("accountId"));
        }
        catch (Exception e) {
            logger.error(errorMsg);
            throw e;
        }
        if (accountId <= 0) {
            logger.error(errorMsg + ": " + accountId);
            throw new Exception(errorMsg + ": " + accountId);
        }
        return accountId;
    }
    
    
    /**
     * Use for both email and archive ActivityContent until there's a reason they should function differently
     */
    private ActivityContent doGetActivityContent(long accountId, String documentId, String campaignActivityId, long externalId) throws Exception {
        // Validate parameters
        if (accountId <= 0) {
            throw new ValidationException("Error: Missing required parameter accountId");
        }
        else if (documentId == null || documentId.length() == 0) {
            throw new ValidationException("Error: Missing required parameter documentId");
        }
        else if (campaignActivityId == null || campaignActivityId.length() == 0) {
            throw new ValidationException("Error: Missing required parameter campaignActivityId");
        }
        else if (externalId  <= 0) {
            throw new ValidationException("Error: Missing required parameter externalId");
        }

        ActivityContent activityContent = new ActivityContent();
        
        String logAccountDoc = "account " + accountId + " document " + documentId + " rendered content";
        String logMissing = " is missing from auth-platform document " + documentId;
        String logMissingContext = logMissing + " context";

        AuthPlatformDocument document = null;
        try {
            document = authPlatformClient.getDocument(accountId, documentId);
        }
        catch (Exception e) {
            logger.error("auth-platform GET " + logAccountDoc + " failed: " + e.toString());
            throw e;
        }
        
        GalileoDocumentMetadata context = null;
        if (document == null) {
            String error = "auth-platform returned null document getting " + logAccountDoc;
            logger.error(error);
            throw new Exception(error);
        }
        else {
            context = document.getContext();
            if (context == null) {
                String error = "auth-platform returned null document.context getting " + logAccountDoc;
                logger.error(error);
                throw new Exception(error);
            }
        }

        // TODO: throw exceptions if these are missing?
        if (context.getSubject() != null && context.getSubject().length() > 0) {
            activityContent.setSubject(context.getSubject());
        }
        else {
            logger.warn("subject" + logMissingContext);
        }
        if (context.getFromName() != null && context.getFromName().length() > 0) {
            activityContent.setFromName(context.getFromName());
        }
        else {
            logger.warn("fromName" + logMissingContext);
        }
        if (context.getFromEmail() != null && context.getFromEmail().length() > 0) {
            activityContent.setFromAddress(context.getFromEmail());
        }
        else {
            logger.warn("fromEmail" + logMissingContext);
        }
        if (context.getReplyToEmail() != null && context.getReplyToEmail().length() > 0) {
            activityContent.setReplyToAddress(context.getReplyToEmail());
        }
        else {
            logger.warn("replyToEmail" + logMissingContext);
        }
        String htmlContent = document.getContent();
        String textContent = null;
        if (htmlContent != null && htmlContent.length() > 0) {
            htmlContent = tracking.addTrackingImage(htmlContent, campaignActivityId, accountId);
            activityContent.setHtmlDoc(htmlContent);
            textContent = HtmlTextExtractor.extractText(htmlContent);
        }
        else {
            logger.warn("rendered_content" + logMissing);
        }
        activityContent.setTextDoc(textContent != null ? textContent : "Text version of document not available.");

        return activityContent;
    }
    
    
   /**
    * helper to map agent row and campaignActivityId
    */
   private void mapAgent2CampaignActivity(long agentUid, String campaignActivityUuid, String externalName) throws Exception {
       int result = agentDao.insertAgentCampaignActivityMapping(agentUid, campaignActivityUuid, externalName);       
       if (result != 1) {
           logger.error("EmailResource returned from insertAgentCampaignActivityMapping call with invalid result: " + result);
           throw new Exception("insertAgentCampaignActivityMapping returned with " + result + " result");
       }
   }

   
   private String resolveFreemarkerTags(String content, Map<String,Object> values) {
       try {
           Template textTemplate = new Template("contentTemplate", new StringReader(content), freemarkerConfiguration);
           StringWriter renderedTextWriter = new StringWriter();
           textTemplate.process(values, renderedTextWriter);
           content = renderedTextWriter.toString();
       }
       catch (Exception e) {
           throw new ServiceException("Freemarker failed to render content", e);
       }
       return content;
   }
   
   private Response buildResponse(Response.Status status, String message) {
       return Response.status(status).entity(message).build();
   }
}
